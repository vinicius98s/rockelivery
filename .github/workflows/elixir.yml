name: Elixir CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:11
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
      with:
        elixir-version: "1.12.1"
        otp-version: "23.3"

    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Check formatting
      run: mix format --check-formatted

    - name: Run credo
      run: mix credo --strict

    - name: Check coverage
      run: mix coveralls.json
      env:
        MIX_ENV: test

    - name: Run Codecov script
      run: bash <(curl -s https://codecov.io/bash)
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Install dependencies
      run: mix deps.get

    - name: Run tests
      run: mix test

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8.1
  
      - uses: mhanberg/gigalixir-action@v0.4.0
        with:
          GIGALIXIR_APP: idolized-fancy-arrowana
          GIGALIXIR_CLEAN: true
          GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
          GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
          MIGRATIONS: false
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
